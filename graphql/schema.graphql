"A datetime string with format Y-m-d H:i:s, e.g. 2018-05-23 13:43:32."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by email."
        email: String! @eq @rules(apply: ["required"])
    ): User @find

    "Find a single recommendation by an identifying attribute."
    recommendation(
        "Search by public key."
        public_id: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:class"])

        "Search by class."
        class: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
    ): Recommendation @find

    "All lands"
    lands: [Land!]! @all

    "Find single land by identifying attribute."
    land(
        "Land ID."
        id: ID! @rules(apply: ["required"])
    ): Land @find

    "All plants"
    plants: [Plant!]! @all

    "Find single plant by plant ID."
    plant(
        "Plant ID."
        id: ID! @rules(apply: ["required"])
    ): Plant @find

    "Find measurements by plant variety ID."
    measurements(
        "Plant variety ID."
        plant_variety_id: ID! @rules(apply: ["required"])
    ): [Measurement!]! @find
}

"Mutations are entry points for modifying data."
type Mutation {
    "Create a new land."
    createLand(
        "Name of the land."
        name: String! @rules(apply: ["required"])

        "Description of the land."
        description: String! @rules(apply: ["required"])
    ): Land @create

    "Update an existing land."
    updateLand(
        "Primary key of the land."
        id: ID! @rules(apply: ["required"])

        "Name of the land."
        name: String @rules(apply: ["required"])

        "Description of the land."
        description: String @rules(apply: ["required"])
    ): Land @update

    "Delete an existing land."
    deleteLand(
        "Primary key of the land."
        id: ID! @rules(apply: ["required"])
    ): Land @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "List of lands that are owned by the user."
    lands: [Land!]! @hasMany

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

"Land that is owned by a user."
type Land {
    "Unique primary key."
    id: ID!

    "Unique public key."
    public_id: String!

    "Name of the land."
    name: String!

    "Description of the land."
    description: String!

    "Latitude of the land."
    latitude: Float!

    "Longitude of the land."
    longitude: Float!

    "Area of the land."
    area: Float!

    "When the land was created."
    created_at: DateTime!

    "When the land was last updated."
    updated_at: DateTime!
}

type Plant {
    "Unique primary key"
    id: ID!

    "Unique public key"
    public_id: String!

    "Name of the plant"
    name: String!

    "Description of the plant"
    description: String!

    "When the plant was created"
    created_at: DateTime!

    "When the plant was last updated"
    updated_at: DateTime!

    "Varieties of the plant"
    varieties: [PlantVariety!]! @hasMany
}

type PlantVariety {
    "Unique primary key"
    id: ID!

    "Unique public key"
    plant: Plant! @belongsTo

    "Name of the plant variety"
    name: String!

    "Description of the plant variety"
    description: String!

    "When the plant variety was created"
    created_at: DateTime!

    "When the plant variety was last updated"
    updated_at: DateTime!

    "Measurements for the plant variety"
    measurements: [Measurement!]!
}

type Period {
    "Unique primary key."
    id: ID!

    "Unique public key."
    public_id: String!

    "Name of the period."
    name: String!

    "Description of the period."
    description: String!

    "When the period was created."
    created_at: DateTime!

    "When the period was last updated."
    updated_at: DateTime!
}

type Threshold {
    "Unique primary key."
    id: ID!

    "Unique public key."
    public_id: String!

    "Name of the threshold."
    name: String!

    "Description of the threshold."
    description: String!

    "When the threshold was created."
    created_at: DateTime!

    "When the threshold was last updated."
    updated_at: DateTime!
}

type Measurement {
    "Unique primary key."
    id: ID!

    "Unique public key."
    public_id: String!

    "Plant variety that the measurement is for."
    varieties: PlantVariety! @belongsTo

    "Land that the measurement is for."
    land: Land! @belongsTo

    "When the measurement was created."
    created_at: DateTime!

    "When the measurement was last updated."
    updated_at: DateTime!
}

"Plant care recommendation."
type Recommendation {
    "Unique primary key."
    id: ID!

    "Unique public key."
    public_id: String!

    "Class of the recommendation."
    class: String!

    "Name of the recommendation."
    name: String!

    "Description of the recommendation."
    content: String!

    "When the recommendation was created."
    created_at: DateTime!

    "When the recommendation was last updated."
    updated_at: DateTime!
}